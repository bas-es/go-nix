// Code generated by goyacc nix.y. DO NOT EDIT.

//line nix.y:2
package parser

import __yyfmt__ "fmt"

//line nix.y:2

//line nix.y:5
type yySymType struct {
	yys   int
	token int
	node  *Node
}

const assert_ = 57346
const if_ = 57347
const then = 57348
const else_ = 57349
const let = 57350
const in = 57351
const with = 57352
const or_ = 57353
const rec = 57354
const inherit = 57355
const ellipsis = 57356
const interp = 57357
const space = 57358
const comment = 57359
const ii = 57360
const uri = 57361
const path = 57362
const float = 57363
const int_ = 57364
const id = 57365
const text = 57366
const argID = 57367
const argBracket = 57368
const pipe_into = 57369
const pipe_from = 57370
const impl = 57371
const or = 57372
const and = 57373
const eq = 57374
const neq = 57375
const leq = 57376
const geq = 57377
const update = 57378
const concat = 57379
const negate = 57380

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"assert_",
	"if_",
	"then",
	"else_",
	"let",
	"in",
	"with",
	"or_",
	"rec",
	"inherit",
	"ellipsis",
	"interp",
	"space",
	"comment",
	"ii",
	"uri",
	"path",
	"float",
	"int_",
	"id",
	"text",
	"argID",
	"argBracket",
	"pipe_into",
	"pipe_from",
	"':'",
	"'@'",
	"','",
	"';'",
	"'\"'",
	"'.'",
	"'('",
	"')'",
	"'['",
	"']'",
	"'{'",
	"'}'",
	"'='",
	"impl",
	"or",
	"and",
	"eq",
	"neq",
	"'<'",
	"'>'",
	"leq",
	"geq",
	"update",
	"'!'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"concat",
	"'?'",
	"negate",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int8{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 83,
	45, 0,
	46, 0,
	-2, 45,
	-1, 84,
	45, 0,
	46, 0,
	-2, 46,
	-1, 87,
	42, 0,
	-2, 49,
}

const yyPrivate = 57344

const yyLast = 381

var yyAct = [...]uint8{
	2, 14, 20, 67, 118, 44, 45, 54, 47, 29,
	28, 48, 99, 70, 136, 130, 57, 40, 39, 38,
	37, 36, 35, 34, 62, 33, 32, 31, 30, 29,
	28, 68, 43, 42, 41, 40, 39, 38, 37, 36,
	35, 34, 46, 33, 32, 31, 30, 29, 28, 68,
	9, 94, 97, 95, 34, 60, 33, 32, 31, 30,
	29, 28, 68, 65, 91, 108, 142, 68, 64, 31,
	30, 29, 28, 113, 103, 103, 106, 72, 61, 33,
	32, 31, 30, 29, 28, 111, 102, 126, 119, 114,
	115, 116, 117, 66, 120, 129, 98, 111, 59, 57,
	125, 57, 48, 141, 121, 93, 124, 69, 110, 100,
	111, 72, 88, 68, 68, 128, 72, 144, 132, 27,
	135, 68, 134, 137, 101, 102, 103, 112, 139, 71,
	58, 69, 140, 92, 104, 72, 122, 123, 52, 53,
	143, 96, 138, 27, 146, 147, 89, 145, 68, 134,
	4, 5, 72, 71, 6, 105, 7, 131, 26, 1,
	127, 102, 55, 8, 22, 16, 17, 18, 19, 27,
	63, 12, 13, 56, 15, 0, 0, 0, 0, 21,
	0, 23, 27, 24, 0, 25, 38, 37, 36, 35,
	34, 0, 33, 32, 31, 30, 29, 28, 11, 0,
	10, 42, 41, 40, 39, 38, 37, 36, 35, 34,
	0, 33, 32, 31, 30, 29, 28, 41, 40, 39,
	38, 37, 36, 35, 34, 0, 33, 32, 31, 30,
	29, 28, 26, 0, 0, 0, 0, 0, 22, 16,
	17, 18, 19, 27, 69, 0, 92, 0, 72, 3,
	0, 0, 0, 21, 0, 23, 27, 24, 0, 25,
	50, 51, 0, 0, 0, 0, 71, 0, 0, 0,
	0, 0, 11, 109, 10, 0, 0, 0, 0, 73,
	74, 75, 76, 77, 78, 79, 80, 81, 82, 83,
	84, 85, 86, 87, 26, 0, 0, 0, 0, 0,
	22, 16, 17, 18, 19, 27, 0, 0, 69, 0,
	49, 0, 72, 0, 0, 21, 26, 23, 0, 24,
	27, 25, 22, 16, 17, 18, 19, 27, 0, 148,
	71, 0, 0, 0, 0, 0, 0, 21, 26, 23,
	0, 24, 107, 25, 22, 16, 17, 18, 19, 27,
	90, 0, 69, 0, 92, 0, 72, 0, 69, 21,
	0, 23, 72, 24, 27, 25, 0, 0, 0, 0,
	27, 0, 0, 0, 71, 0, 0, 0, 0, 133,
	71,
}

var yyPact = [...]int16{
	146, -1000, -1000, -10, 146, 146, -1000, 146, -1000, 282,
	220, 220, 109, 159, 103, 64, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 146, -1000, -1000, 24, -1000, 96, 220,
	220, 220, 220, 220, 220, 220, 220, 220, 220, 220,
	220, 220, 220, 220, 80, 140, 341, 73, -1000, 326,
	-1000, 26, 146, 115, 12, 65, -1000, -46, 326, 96,
	101, 137, 40, 304, 233, -1000, 63, -1000, -1000, -1000,
	-1000, -1000, 146, -48, -48, -48, 14, 14, 3, 3,
	3, 3, 3, 139, 139, -28, 173, 158, 146, 146,
	146, 51, 53, 146, -1000, -1000, 159, 107, 159, 146,
	282, 76, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	120, 96, 62, -25, -1000, 150, -1000, 146, 347, 146,
	-1000, -26, 146, 117, -1000, -1000, 326, -1000, -1000, -1000,
	-1000, 146, 71, -1000, -1000, 30, 111, -1000, 88, -1000,
	-1000, -1000, -1000, 146, 146, 297, -1000, -1000, -1000,
}

var yyPgo = [...]uint8{
	0, 0, 13, 55, 2, 174, 1, 50, 249, 3,
	64, 170, 42, 4, 163, 7, 162, 159,
}

var yyR1 = [...]int8{
	0, 17, 1, 1, 1, 1, 1, 1, 2, 3,
	3, 3, 4, 5, 5, 5, 5, 5, 5, 5,
	5, 5, 5, 5, 6, 6, 6, 7, 7, 7,
	7, 8, 8, 8, 8, 8, 8, 8, 8, 8,
	8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
	9, 9, 9, 9, 10, 10, 11, 11, 12, 12,
	12, 12, 13, 13, 14, 14, 14, 14, 15, 15,
	15, 15, 16, 16,
}

var yyR2 = [...]int8{
	0, 1, 1, 4, 6, 4, 4, 1, 3, 0,
	2, 2, 1, 1, 1, 1, 1, 1, 3, 3,
	3, 3, 3, 4, 1, 3, 5, 1, 2, 3,
	3, 1, 2, 3, 3, 3, 3, 3, 3, 2,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	1, 1, 1, 3, 1, 3, 0, 2, 0, 5,
	4, 7, 0, 2, 3, 5, 7, 7, 0, 1,
	1, 3, 1, 3,
}

var yyChk = [...]int16{
	-1000, -17, -1, -8, 4, 5, 8, 10, -14, -7,
	54, 52, 25, 26, -6, -5, 19, 20, 21, 22,
	-4, 33, 18, 35, 37, 39, 12, 23, 58, 57,
	56, 55, 54, 53, 51, 50, 49, 48, 47, 46,
	45, 44, 43, 42, -1, -1, -12, -1, -6, 28,
	-8, -8, 29, 30, -15, -16, 14, -4, 27, 34,
	-3, -3, -1, -11, -12, 39, -10, -9, -4, 11,
	-2, 33, 15, -8, -8, -8, -8, -8, -8, -8,
	-8, -8, -8, -8, -8, -8, -8, -8, 32, 6,
	9, -10, 13, 32, -6, -1, 26, 40, 31, 58,
	-7, -10, 24, -2, 33, 18, 36, 38, -6, 40,
	-12, 34, -3, -1, -1, -1, -1, 41, -13, 35,
	-1, -15, 29, 30, -15, -1, 11, 40, -9, 33,
	40, 7, -1, 32, -9, -1, 40, -1, 25, -6,
	-1, 32, 36, 29, 29, -13, -1, -1, 32,
}

var yyDef = [...]int8{
	0, -2, 1, 2, 0, 0, 58, 0, 7, 31,
	0, 0, 0, 68, 27, 24, 13, 14, 15, 16,
	17, 9, 9, 0, 56, 58, 0, 12, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 28, 0,
	32, 39, 0, 0, 0, 69, 70, 72, 0, 0,
	0, 0, 0, 0, 0, 58, 33, 54, 50, 51,
	52, 9, 0, 34, 35, 36, 37, 38, 40, 41,
	42, 43, 44, -2, -2, 47, 48, -2, 0, 0,
	0, 0, 62, 0, 29, 64, 68, 0, 68, 0,
	30, 25, 10, 11, 18, 19, 20, 21, 57, 22,
	0, 0, 0, 0, 3, 0, 5, 0, 0, 0,
	6, 0, 0, 0, 71, 73, 0, 23, 55, 53,
	8, 0, 0, 60, 63, 0, 0, 65, 0, 26,
	4, 59, 62, 0, 0, 0, 66, 67, 61,
}

var yyTok1 = [...]int8{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 52, 33, 3, 3, 3, 3, 3,
	35, 36, 55, 53, 31, 54, 34, 56, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 29, 32,
	47, 41, 48, 58, 30, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 37, 3, 38, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 39, 3, 40,
}

var yyTok2 = [...]int8{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 42, 43, 44,
	45, 46, 49, 50, 51, 57, 59,
}

var yyTok3 = [...]int8{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]
	p := yylex.(*Parser)

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-1 : yypt+1]
//line nix.y:40
		{
			p.Result = yyDollar[1].node
		}
	case 3:
		yyDollar = yyS[yypt-4 : yypt+1]
//line nix.y:46
		{
			yyVAL.node = p.NewNode(AssertNode, yyDollar[1].token, yyDollar[3].token).N2(yyDollar[2].node, yyDollar[4].node)
		}
	case 4:
		yyDollar = yyS[yypt-6 : yypt+1]
//line nix.y:48
		{
			yyVAL.node = p.NewNode(IfNode, yyDollar[1].token, yyDollar[3].token, yyDollar[5].token).N3(yyDollar[2].node, yyDollar[4].node, yyDollar[6].node)
		}
	case 5:
		yyDollar = yyS[yypt-4 : yypt+1]
//line nix.y:50
		{
			yyVAL.node = p.NewNode(LetNode, yyDollar[1].token, yyDollar[3].token).N2(yyDollar[2].node, yyDollar[4].node)
		}
	case 6:
		yyDollar = yyS[yypt-4 : yypt+1]
//line nix.y:52
		{
			yyVAL.node = p.NewNode(WithNode, yyDollar[1].token, yyDollar[3].token).N2(yyDollar[2].node, yyDollar[4].node)
		}
	case 8:
		yyDollar = yyS[yypt-3 : yypt+1]
//line nix.y:58
		{
			yyVAL.node = p.NewNode(InterpNode, yyDollar[1].token, yyDollar[3].token).N1(yyDollar[2].node)
		}
	case 9:
		yyDollar = yyS[yypt-0 : yypt+1]
//line nix.y:63
		{
			yyVAL.node = p.NewNode(StringNode)
		}
	case 10:
		yyDollar = yyS[yypt-2 : yypt+1]
//line nix.y:65
		{
			yyVAL.node = yyDollar[1].node.N1(p.NewNode(TextNode, yyDollar[2].token))
		}
	case 11:
		yyDollar = yyS[yypt-2 : yypt+1]
//line nix.y:67
		{
			yyVAL.node = yyDollar[1].node.N1(yyDollar[2].node)
		}
	case 12:
		yyDollar = yyS[yypt-1 : yypt+1]
//line nix.y:72
		{
			yyVAL.node = p.NewNode(IDNode, yyDollar[1].token)
		}
	case 13:
		yyDollar = yyS[yypt-1 : yypt+1]
//line nix.y:77
		{
			yyVAL.node = p.NewNode(URINode, yyDollar[1].token)
		}
	case 14:
		yyDollar = yyS[yypt-1 : yypt+1]
//line nix.y:79
		{
			yyVAL.node = p.NewNode(PathNode, yyDollar[1].token)
		}
	case 15:
		yyDollar = yyS[yypt-1 : yypt+1]
//line nix.y:81
		{
			yyVAL.node = p.NewNode(FloatNode, yyDollar[1].token)
		}
	case 16:
		yyDollar = yyS[yypt-1 : yypt+1]
//line nix.y:83
		{
			yyVAL.node = p.NewNode(IntNode, yyDollar[1].token)
		}
	case 18:
		yyDollar = yyS[yypt-3 : yypt+1]
//line nix.y:86
		{
			yyVAL.node = yyDollar[2].node.T2(yyDollar[1].token, yyDollar[3].token)
		}
	case 19:
		yyDollar = yyS[yypt-3 : yypt+1]
//line nix.y:88
		{
			yyVAL.node = yyDollar[2].node.T2(yyDollar[1].token, yyDollar[3].token).SetType(IStringNode)
		}
	case 20:
		yyDollar = yyS[yypt-3 : yypt+1]
//line nix.y:90
		{
			yyVAL.node = p.NewNode(ParensNode, yyDollar[1].token, yyDollar[3].token).N1(yyDollar[2].node)
		}
	case 21:
		yyDollar = yyS[yypt-3 : yypt+1]
//line nix.y:92
		{
			yyVAL.node = yyDollar[2].node.T2(yyDollar[1].token, yyDollar[3].token)
		}
	case 22:
		yyDollar = yyS[yypt-3 : yypt+1]
//line nix.y:94
		{
			yyVAL.node = yyDollar[2].node.T2(yyDollar[1].token, yyDollar[3].token).SetType(SetNode)
		}
	case 23:
		yyDollar = yyS[yypt-4 : yypt+1]
//line nix.y:96
		{
			yyVAL.node = yyDollar[3].node.T3(yyDollar[1].token, yyDollar[2].token, yyDollar[4].token).SetType(RecSetNode)
		}
	case 25:
		yyDollar = yyS[yypt-3 : yypt+1]
//line nix.y:102
		{
			yyVAL.node = p.NewNode(SelectNode, yyDollar[2].token).N2(yyDollar[1].node, yyDollar[3].node)
		}
	case 26:
		yyDollar = yyS[yypt-5 : yypt+1]
//line nix.y:104
		{
			yyVAL.node = p.NewNode(SelectOrNode, yyDollar[2].token, yyDollar[4].token).N3(yyDollar[1].node, yyDollar[3].node, yyDollar[5].node)
		}
	case 28:
		yyDollar = yyS[yypt-2 : yypt+1]
//line nix.y:110
		{
			yyVAL.node = p.NewNode(ApplyNode).N2(yyDollar[1].node, yyDollar[2].node)
		}
	case 29:
		yyDollar = yyS[yypt-3 : yypt+1]
//line nix.y:112
		{
			yyVAL.node = p.NewNode(ApplyNode).N2(yyDollar[1].node, yyDollar[3].node)
		}
	case 30:
		yyDollar = yyS[yypt-3 : yypt+1]
//line nix.y:114
		{
			yyVAL.node = p.NewNode(ApplyNode).N2(yyDollar[3].node, yyDollar[1].node)
		}
	case 32:
		yyDollar = yyS[yypt-2 : yypt+1]
//line nix.y:120
		{
			yyVAL.node = p.Op(negate, yyDollar[1].token).N1(yyDollar[2].node)
		}
	case 33:
		yyDollar = yyS[yypt-3 : yypt+1]
//line nix.y:122
		{
			yyVAL.node = p.Op('?', yyDollar[2].token).N2(yyDollar[1].node, yyDollar[3].node)
		}
	case 34:
		yyDollar = yyS[yypt-3 : yypt+1]
//line nix.y:124
		{
			yyVAL.node = p.Op(concat, yyDollar[2].token).N2(yyDollar[1].node, yyDollar[3].node)
		}
	case 35:
		yyDollar = yyS[yypt-3 : yypt+1]
//line nix.y:126
		{
			yyVAL.node = p.Op('/', yyDollar[2].token).N2(yyDollar[1].node, yyDollar[3].node)
		}
	case 36:
		yyDollar = yyS[yypt-3 : yypt+1]
//line nix.y:128
		{
			yyVAL.node = p.Op('*', yyDollar[2].token).N2(yyDollar[1].node, yyDollar[3].node)
		}
	case 37:
		yyDollar = yyS[yypt-3 : yypt+1]
//line nix.y:130
		{
			yyVAL.node = p.Op('-', yyDollar[2].token).N2(yyDollar[1].node, yyDollar[3].node)
		}
	case 38:
		yyDollar = yyS[yypt-3 : yypt+1]
//line nix.y:132
		{
			yyVAL.node = p.Op('+', yyDollar[2].token).N2(yyDollar[1].node, yyDollar[3].node)
		}
	case 39:
		yyDollar = yyS[yypt-2 : yypt+1]
//line nix.y:134
		{
			yyVAL.node = p.Op('!', yyDollar[1].token).N1(yyDollar[2].node)
		}
	case 40:
		yyDollar = yyS[yypt-3 : yypt+1]
//line nix.y:136
		{
			yyVAL.node = p.Op(update, yyDollar[2].token).N2(yyDollar[1].node, yyDollar[3].node)
		}
	case 41:
		yyDollar = yyS[yypt-3 : yypt+1]
//line nix.y:138
		{
			yyVAL.node = p.Op(geq, yyDollar[2].token).N2(yyDollar[1].node, yyDollar[3].node)
		}
	case 42:
		yyDollar = yyS[yypt-3 : yypt+1]
//line nix.y:140
		{
			yyVAL.node = p.Op(leq, yyDollar[2].token).N2(yyDollar[1].node, yyDollar[3].node)
		}
	case 43:
		yyDollar = yyS[yypt-3 : yypt+1]
//line nix.y:142
		{
			yyVAL.node = p.Op('>', yyDollar[2].token).N2(yyDollar[1].node, yyDollar[3].node)
		}
	case 44:
		yyDollar = yyS[yypt-3 : yypt+1]
//line nix.y:144
		{
			yyVAL.node = p.Op('<', yyDollar[2].token).N2(yyDollar[1].node, yyDollar[3].node)
		}
	case 45:
		yyDollar = yyS[yypt-3 : yypt+1]
//line nix.y:146
		{
			yyVAL.node = p.Op(neq, yyDollar[2].token).N2(yyDollar[1].node, yyDollar[3].node)
		}
	case 46:
		yyDollar = yyS[yypt-3 : yypt+1]
//line nix.y:148
		{
			yyVAL.node = p.Op(eq, yyDollar[2].token).N2(yyDollar[1].node, yyDollar[3].node)
		}
	case 47:
		yyDollar = yyS[yypt-3 : yypt+1]
//line nix.y:150
		{
			yyVAL.node = p.Op(and, yyDollar[2].token).N2(yyDollar[1].node, yyDollar[3].node)
		}
	case 48:
		yyDollar = yyS[yypt-3 : yypt+1]
//line nix.y:152
		{
			yyVAL.node = p.Op(or, yyDollar[2].token).N2(yyDollar[1].node, yyDollar[3].node)
		}
	case 49:
		yyDollar = yyS[yypt-3 : yypt+1]
//line nix.y:154
		{
			yyVAL.node = p.Op(impl, yyDollar[2].token).N2(yyDollar[1].node, yyDollar[3].node)
		}
	case 51:
		yyDollar = yyS[yypt-1 : yypt+1]
//line nix.y:160
		{
			yyVAL.node = p.NewNode(IDNode, yyDollar[1].token)
		}
	case 53:
		yyDollar = yyS[yypt-3 : yypt+1]
//line nix.y:163
		{
			yyVAL.node = yyDollar[2].node.T2(yyDollar[1].token, yyDollar[3].token)
		}
	case 54:
		yyDollar = yyS[yypt-1 : yypt+1]
//line nix.y:168
		{
			yyVAL.node = p.NewNode(AttrPathNode).N1(yyDollar[1].node)
		}
	case 55:
		yyDollar = yyS[yypt-3 : yypt+1]
//line nix.y:170
		{
			yyVAL.node = yyDollar[1].node.T1(yyDollar[2].token).N1(yyDollar[3].node)
		}
	case 56:
		yyDollar = yyS[yypt-0 : yypt+1]
//line nix.y:175
		{
			yyVAL.node = p.NewNode(ListNode)
		}
	case 57:
		yyDollar = yyS[yypt-2 : yypt+1]
//line nix.y:177
		{
			yyVAL.node = yyDollar[1].node.N1(yyDollar[2].node)
		}
	case 58:
		yyDollar = yyS[yypt-0 : yypt+1]
//line nix.y:182
		{
			yyVAL.node = p.NewNode(BindsNode)
		}
	case 59:
		yyDollar = yyS[yypt-5 : yypt+1]
//line nix.y:184
		{
			yyVAL.node = yyDollar[1].node.N1(p.NewNode(BindNode, yyDollar[3].token, yyDollar[5].token).N2(yyDollar[2].node, yyDollar[4].node))
		}
	case 60:
		yyDollar = yyS[yypt-4 : yypt+1]
//line nix.y:186
		{
			yyVAL.node = yyDollar[1].node.N1(p.NewNode(InheritNode, yyDollar[2].token, yyDollar[4].token).N1(yyDollar[3].node))
		}
	case 61:
		yyDollar = yyS[yypt-7 : yypt+1]
//line nix.y:188
		{
			yyVAL.node = yyDollar[1].node.N1(p.NewNode(InheritFromNode, yyDollar[2].token, yyDollar[3].token, yyDollar[5].token, yyDollar[7].token).N2(yyDollar[4].node, yyDollar[6].node))
		}
	case 62:
		yyDollar = yyS[yypt-0 : yypt+1]
//line nix.y:193
		{
			yyVAL.node = p.NewNode(InheritListNode)
		}
	case 63:
		yyDollar = yyS[yypt-2 : yypt+1]
//line nix.y:195
		{
			yyVAL.node = yyDollar[1].node.N1(yyDollar[2].node)
		}
	case 64:
		yyDollar = yyS[yypt-3 : yypt+1]
//line nix.y:201
		{
			yyVAL.node = p.NewNode(FunctionNode, yyDollar[2].token).N2(p.NewNode(IDNode, yyDollar[1].token), yyDollar[3].node)
		}
	case 65:
		yyDollar = yyS[yypt-5 : yypt+1]
//line nix.y:203
		{
			yyVAL.node = p.NewNode(FunctionNode, yyDollar[4].token).N2(yyDollar[2].node.T2(yyDollar[1].token, yyDollar[3].token), yyDollar[5].node)
		}
	case 66:
		yyDollar = yyS[yypt-7 : yypt+1]
//line nix.y:205
		{
			yyVAL.node = p.NewNode(FunctionNode, yyDollar[2].token, yyDollar[6].token).N3(p.NewNode(IDNode, yyDollar[1].token), yyDollar[4].node.T2(yyDollar[3].token, yyDollar[5].token), yyDollar[7].node)
		}
	case 67:
		yyDollar = yyS[yypt-7 : yypt+1]
//line nix.y:207
		{
			yyVAL.node = p.NewNode(FunctionNode, yyDollar[4].token, yyDollar[6].token).N3(p.NewNode(IDNode, yyDollar[5].token), yyDollar[2].node.T2(yyDollar[1].token, yyDollar[3].token), yyDollar[7].node)
		}
	case 68:
		yyDollar = yyS[yypt-0 : yypt+1]
//line nix.y:212
		{
			yyVAL.node = p.NewNode(ArgSetNode)
		}
	case 69:
		yyDollar = yyS[yypt-1 : yypt+1]
//line nix.y:214
		{
			yyVAL.node = p.NewNode(ArgSetNode).N1(yyDollar[1].node)
		}
	case 70:
		yyDollar = yyS[yypt-1 : yypt+1]
//line nix.y:216
		{
			yyVAL.node = p.NewNode(ArgSetNode).N1(p.NewNode(ArgNode, yyDollar[1].token))
		}
	case 71:
		yyDollar = yyS[yypt-3 : yypt+1]
//line nix.y:218
		{
			yyVAL.node = yyDollar[3].node.N1(yyDollar[1].node.T1(yyDollar[2].token))
		}
	case 72:
		yyDollar = yyS[yypt-1 : yypt+1]
//line nix.y:223
		{
			yyVAL.node = p.NewNode(ArgNode).N1(yyDollar[1].node)
		}
	case 73:
		yyDollar = yyS[yypt-3 : yypt+1]
//line nix.y:225
		{
			yyVAL.node = p.NewNode(ArgNode, yyDollar[2].token).N2(yyDollar[1].node, yyDollar[3].node)
		}
	}
	goto yystack /* stack new state and value */
}
